# Spring Application Name
spring.application.name=Todo Backend Application

# Define the fixed username and password
spring.security.user.name=admin
spring.security.user.password=password



website.name = Welcome to Todo Springboot application
prop = Default Value

# Server Port Configuration
server.port=8080

spring.profiles.active=default
#if me mention test for example then it loads the base configuration file application.properties and overrides configurations that are present in application-test.properties files

# --------------------------------MySQL Database Configuration-----------------------------------
spring.datasource.url=jdbc:mysql://localhost:3306/todo
# This is the JDBC URL used to connect to your MySQL database.

spring.datasource.username=admin
# The username for your MySQL database.

spring.datasource.password=password
# The password for your MySQL database.

#---------------------------------- Hibernate Configuration (JPA settings)---------------------

spring.jpa.hibernate.ddl-auto=update
# This setting controls how Hibernate handles the database schema.
# Options:
# - none: No schema changes are applied (you need to manage the schema yourself).
# - update: Hibernate will attempt to automatically update the schema when the application starts (adding/removing columns, etc.).
# - create: Hibernate will drop the schema and recreate it on startup (useful for development, but can result in data loss).
# - create-drop: Similar to 'create', but the schema will be dropped when the application stops.
# Example: spring.jpa.hibernate.ddl-auto=create (To create the schema from scratch on each application startup)

# Enable logging of SQL queries to the console
spring.jpa.show-sql=true

## Enable logging of Hibernate SQL statements to file
#logging.level.org.hibernate.SQL=DEBUG
#
## Specify log file location and name
#logging.file.name=application.log  # Log file name
#logging.file.path=logs             # Log file directory (optional)


# Optional: Hibernate Dialect (for performance optimization with specific databases)

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# This specifies the Hibernate dialect to use for your database. 
# You can comment this out since Hibernate can auto-detect the dialect based on the database.
# Example: spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect (For PostgreSQL

#------------------------------------------------------------JWT----------------------------------------------
spring.app.jwtSecret = secret12198
spring.app.jwtExpirationMs = 300000000000000000

#-------------------------------------------------------------Kafka configuration-----------------------------------

# Kafka Broker Address (Address of the Kafka broker(s) your application will connect to)
spring.kafka.bootstrap-servers=localhost:9092

# Consumer Configuration (Configures how the consumer deserializes the message key and value)
spring.kafka.consumer.group-id=my-consumer-group  
# Consumer group identifier for Kafka consumers
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer 
# Deserializer for the key of messages (String format)
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer  
# Deserializer for the value of messages (String format)
spring.kafka.consumer.auto-offset-reset=earliest  
# Defines where to start reading from when no offset is found (earliest or latest)

# Producer Configuration (Configures how the producer serializes the message key and value)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer  
# Serializer for the key of messages (String format)
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer  
# Serializer for the value of messages (String format)



#----------------------------------------------Spring Boot Started Email---------------------
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=singh.utsav100@gmail.com
spring.mail.password=gnxs mboc xruc lxqs
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true



#----------------------------------------Optional----------------------

# Optional: Connection Pool Settings (Performance tuning)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# This specifies the JDBC driver class name for MySQL. It's used by Spring Boot to load the MySQL JDBC driver.
# This value is usually auto-detected, but it's good to specify it explicitly.
# Example: spring.datasource.driver-class-name=org.postgresql.Driver (For PostgreSQL)

# Connection Pool Configuration using HikariCP (default in Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
# This defines the maximum number of connections that HikariCP (the default connection pool in Spring Boot) can maintain.
# Example: spring.datasource.hikari.maximum-pool-size=20 (For larger connection pools)

spring.datasource.hikari.minimum-idle=2
# This is the minimum number of idle connections that the pool will maintain.
# Example: spring.datasource.hikari.minimum-idle=5 (To increase the minimum idle connections)

spring.datasource.hikari.idle-timeout=30000
# This is the maximum amount of time (in milliseconds) that a connection can remain idle before being closed by the pool.
# Example: spring.datasource.hikari.idle-timeout=60000 (To keep idle connections for 1 minute before closing them)

spring.datasource.hikari.max-lifetime=1800000
# This is the maximum lifetime of a connection in the pool (in milliseconds). Once a connection exceeds this time, it will be closed and replaced.
# Example: spring.datasource.hikari.max-lifetime=3600000 (To increase the connection lifetime to 1 hour)
